// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model AttributeMultiplier {
  id         BigInt        @id @default(autoincrement())
  attribute  AttributeName
  multiplier Float
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Employee {
  id        BigInt     @id @default(autoincrement())
  clerkId   String     @unique
  name      String
  avatarUrl String?
  email     String     @unique
  phone     String?
  customers Customer[]
}

model PastOperation {
  id            BigInt    @id @default(autoincrement())
  customerId    BigInt
  description   String
  operationDate DateTime?
  customer      Customer  @relation(fields: [customerId], references: [id])
}

model Customer {
  cardiacIssues          Boolean?
  diabeticCondition      Boolean?
  hypertension           Boolean?
  cardiacIssuesScore     Int?
  diabeticConditionScore Int?
  hypertensionScore      Int?
  step                   Int?
  bmiScore               Int?
  smokeScore             Int?
  jobScore               Int?
  addressScore           Int?
  ageScore               Int?
  employeeIdScore        Int?
  insuranceSumScore      Int?
  durationScore          Int?
  premiumScore           Int?
  statusScore            Int?
  genderScore            Int?
  decisiveFactorScore    Int?
  trafficLightScore      Int?
  requestDateScore       Int?
  id                     BigInt             @id @default(autoincrement())
  name                   String?
  address                String?
  birthdate              DateTime?
  smoking                Boolean?
  bmi                    Float?
  job                    String?
  employeeId             BigInt?
  insuranceSum           Float?
  duration               Int?
  premium                Float?
  status                 Status?            @default(draft)
  requestDate            DateTime           @default(now())
  email                  String?            @unique
  gender                 Gender?
  decisiveFactor         DecisiveFactor?
  idDocument             String[]
  trafficLightColor      TrafficLightColor?
  documents              Document[]
  employee               Employee?          @relation(fields: [employeeId], references: [id])
  pastOperation          PastOperation[]
}

model Document {
  id         BigInt   @id @default(autoincrement())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId BigInt
  fileUrl    String
  uploadDate DateTime @default(now())
  title      String
}

enum Status {
  draft
  waiting_for_approval
  requesting_documents
  accepted
  rejected
  accepted_with_conditions
}

enum Gender {
  male
  female
}

enum DecisiveFactor {
  score
  healthCheck
}

enum TrafficLightColor {
  green
  orange
  red
}

model RiskThreshold {
  id        Int   @id @default(autoincrement())
  greenMax  Float // Max score for Green category
  orangeMax Float // Max score for Orange category
  // Anything above orangeMax will automatically be categorized as Red
}

enum AttributeName {
  AGE
  BMI
  SMOKING
  JOB
  BIRTHDATE
  INSURANCE_SUM
  DURATION
  GENDER
}
